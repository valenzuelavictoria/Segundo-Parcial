#1. Se tiene datos de los Pokémons de las 8 generaciones cargados de manera desordenada de los cuales se conoce su nombre, número, tipo/tipos para el cual debemos construir tres árboles para acceder de manera eficiente a los datos, contemplando lo siguiente:
#a) los índices de cada uno de los árboles deben ser nombre, número y tipo;
#b) mostrar todos los datos de un Pokémon a partir de su número y nombre –para este último, la búsqueda debe ser por proximidad, es decir si busco “bul” se deben mostrar todos los Pokémons cuyos nombres comiencen o contengan dichos caracteres–;
#c) mostrar todos los nombres de todos los Pokémons de un determinado tipo agua, fuego, planta y eléctrico;
#d) realizar un listado en orden ascendente por número y nombre de Pokémon, y además un listado por nivel por nombre;
#e) mostrar todos los datos de los Pokémons: Jolteon, Lycanroc y Tyrantrum;
#f) Determina cuantos Pokémons hay de tipo eléctrico y acero.

from arbolbinario import BinaryTree, get_value_from_file

NombrePokemon = BinaryTree()
NumeroPokemon = BinaryTree()
TipoPokemon = BinaryTree()

Pokemons = [
    {'name':'Dialga','tipo': 'Acero', 'numero': 123},
    {'name':'Aron','tipo': 'Acero','numero': 58},
    {'name':'Stelix','tipo': 'Acero','numero': 66},
    {'name':'Squirtle','tipo': 'Agua','numero': 48},
    {'name':'Golduck','tipo': 'Agua','numero': 4456},
    {'name':'Catespie','tipo': 'Bicho','numero': 156},
    {'name':'Butterfree','tipo': 'Bicho','numero': 3368},
    {'name':'Dratini','tipo': 'Dragon','numero': 5},
    {'name':'Bagon','tipo': 'Dragon','numero': 972},
    {'name':'Picachu','tipo': 'Electrico','numero': 2},
    {'name':'Voltorb','tipo': 'Electrico','numero': 15},
    {'name':'Charmander','tipo': 'Fuego','numero': 2816},
    {'name':'Magby','tipo': 'Acero','numero': 955},
    {'name':'Jolteon','tipo': 'Electrico','numero': 23},
    {'name':'Lycanroc','tipo': 'Roca','numero': 1888},
    {'name':'Tyrantrum','tipo': 'Roca','numero': 12115},
]

for i in Pokemons:
    NombrePokemon.insert_node(i['name'],[i['tipo'],i['numero']])
    NumeroPokemon.insert_node(i['name'],[i['tipo'],i['numero']])
    TipoPokemon.insert_node(i['name'],[i['tipo'],i['numero']])
                            
#b) mostrar todos los datos de un Pokémon a partir de su número y nombre –para este último, la búsqueda debe ser por proximidad, es decir si busco “bul” se deben mostrar todos los Pokémons cuyos nombres comiencen o contengan dichos caracteres–;
#busqueda por numero
#num = (int(input('Ingrese el numero del pokemon que busca: ')))
#NumeroPokemon.inorden(num)

#busqueda por aproximacion
#nom = (input('ingrese el nombre del pokemon que busca: '))
#resultado = NombrePokemon.search_by_coincidence(nom)
#if resultado is not None:
#    print('Coincidencias encontradas: ')
#    for name in resultado:
#        print(name)
#else:
#    print('No se encontraron coincidencias')


#c) mostrar todos los nombres de todos los Pokémons de un determinado tipo agua, fuego, planta y eléctrico;
#print('Los pokemons de tipo agua son: ')
#TipoPokemon.inorden_tipo('Agua')
#print('Los pokemons de tipo planta son: ')
#TipoPokemon.inorden_tipo('Planta')
#print('Los pokemons de tipo electricos son: ')
#TipoPokemon.inorden_tipo('Electrico')


#d) realizar un listado en orden ascendente por número y nombre de Pokémon, y además un listado por nivel por nombre;
#orden ascendente
#NumeroPokemon.inorden()
#NombrePokemon.inorden()
#print()

#por nivel
#NombrePokemon.by_level()
#print()

#e) mostrar todos los datos de los Pokémons: Jolteon, Lycanroc y Tyrantrum;
#busqueda1 = NombrePokemon.search('Jolteon')
#if busqueda1 is not None:
#    print (f'Los datos de Jolteon son: {busqueda1.other_values}')
#else:
#    print(f'No se encontró')

#busqueda2 = NombrePokemon.search('Lycanroc')
#if busqueda2 is not None:
#    print (f'Los datos de Lycanroc son: {busqueda2.other_values}')
#else:
#    print(f'No se encontró')

#busqueda3 = NombrePokemon.search('Tyrantrum')
#if busqueda3 is not None:
#    print (f'Los datos de Tyrantrum son: {busqueda3.other_values}')
#else:
#    print(f'No se encontró')

#f) Determina cuantos Pokémons hay de tipo eléctrico y acero.
#print ('La cantidad de pokemones de tipo electrico es: ', NombrePokemon.contar_tipo('Electrico'))
#print ('La cantidad de pokemones de tipo acero es: ', NombrePokemon.contar_tipo('Acero'))
